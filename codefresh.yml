# More examples of Codefresh YAML can be found at
# https://codefresh.io/docs/docs/yaml-examples/examples/

version: "1.0"
# Stages can help you organize your steps in stages
stages:
  - "clone"
  - "build"
  - "test"
  - "package"
  - "deploy"


steps:
  clone:
    title: "Cloning repository"
    type: "git-clone"
    repo: "antoszyk-demo/app"
    # CF_BRANCH value is auto set when pipeline is triggered
    # Learn more at codefresh.io/docs/docs/codefresh-yaml/variables/
    revision: "${{CF_BRANCH}}"
    git: "github"
    stage: "clone"

  build:
    title: "Building Docker image"
    type: "build"
    image_name: "demo/app"
    working_directory: "${{clone}}"
    registry: harbor
    tags: 
      - "${{CF_BRANCH_TAG_NORMALIZED}}"
      - "${{CF_SHORT_REVISION}}"
    dockerfile: "Dockerfile"
    stage: "build"

  Freestyle:
    title: Running docker image
    type: freestyle
    stage: "test"
    working_directory: '${{clone}}'
    arguments:
      image: 'harbor.demo-mgmt.cf/build_images/ubuntu'
      commands:
        - echo "Hello world"
        - pwd
        - ls -la
        - env

  tests:
      stage: "test"
      type: parallel
      steps:
        poetry:
          title: "poetry test"
          type: "freestyle" # Run any command
          image: ${{build}}
          working_directory: "${{clone}}" # Running command where code cloned
          commands:
            - "poetry run pytest --alluredir=allure-results --junitxml=report.xml tests/"
            - cp -rf ./allure-results $CF_VOLUME_PATH/allure-results

        scan:
          title: Scan images
          type: freestyle
          image: "harbor.demo-mgmt.cf/build_images/trivy" # The image in which command will be executed
          commands:
            - "trivy harbor.demo-mgmt.cf/demo/app:${{CF_SHORT_REVISION}}"

  package:
    stage: "package"
    type: parallel
    steps:
      push_to_dockerhub:
        type: push
        title: Pushing to a registry
        candidate: ${{build}}
        tags: 
          - "${{CF_BRANCH_TAG_NORMALIZED}}"
          - latest
          - "${{CF_SHORT_REVISION}}"
        registry: docker-hub
        image_name: antoszykdemo/app
      unit_test_reporting:
        title: Generate test reporting
        image: codefresh/cf-docker-test-reporting
        working_directory: '${{CF_VOLUME_PATH}}/'
        environment:
          - BUCKET_NAME=cf_demo_bucket
          - CF_STORAGE_INTEGRATION=google

      helm_package:
        title: Helm package
        stage: "package"
        type: helm
        arguments:
          action: push
          helm_version: 3.4.1
          chart_name: "/codefresh/volume/app/chart"
          chart_repo_url: 'cm://h.cfcr.io/antoszyk-demo/default'

  deploy_preview:
    type: helm
    stage: "deploy"
    title: Deploy to preview environment
    arguments:
      action: install
      chart_name: "/codefresh/volume/app/chart" # app is the repo that is cloned
      release_name: "cf-app-${{CF_BRANCH_TAG_NORMALIZED}}"
      helm_version: 3.4.1
      kube_context: staging
      namespace: "${{CF_BRANCH_TAG_NORMALIZED}}"
      skip_cf_stable_helm_repo: true
      credentials_in_arguments: true
      cmd_ps: '--create-namespace'
      custom_values:
        - "image.tag=${{CF_SHORT_REVISION}}"
        - 'ingress.enabled=true'
        - 'ingress.hosts[0].host=${{CF_BRANCH_TAG_NORMALIZED}}.app-demo.cf'
        - 'ingress.hosts[0].paths[0].path=/'
    env:
      name: preview
      endpoints:
      - name: "cf-app-${{CF_BRANCH_TAG_NORMALIZED}}"
        url: http://${{CF_BRANCH_TAG_NORMALIZED}}.app-demo.cf
      type: helm-release
      change: ${{CF_COMMIT_MESSAGE}}
      filters:
      - cluster: my-cluster
        namespace: default    
    when:
      branch:
        only:
          - /^feature\/.*/i
  deploy_staging:
    type: helm
    stage: "deploy"
    title: Deploy to staging
    arguments:
      action: install
      chart_name: "/codefresh/volume/app/chart" # app is the repo that is cloned
      release_name: cf-app
      helm_version: 3.4.1
      kube_context: staging
      namespace: demo
      skip_cf_stable_helm_repo: true
      credentials_in_arguments: true
      custom_values:
        - "image.tag=${{CF_SHORT_REVISION}}"
        - 'ingress.enabled=true'
        - 'ingress.hosts[0].host=demo.app-demo.cf'
        - 'ingress.hosts[0].paths[0].path=/'
    env:
      name: staging
      endpoints:
      - name: cf-app-staging
        url: http://demo.app-demo.cf
      type: helm-release
      change: ${{CF_COMMIT_MESSAGE}}
      filters:
      - cluster: staging
        namespace: demo   
    when:
      branch:
        only:
          - master

  deploy_prod:
    type: helm
    stage: "deploy"
    title: Deploy to production
    arguments:
      action: install
      chart_name: "/codefresh/volume/app/chart" # app is the repo that is cloned
      release_name: cf-app
      helm_version: 3.4.1
      kube_context: prod
      namespace: demo
      skip_cf_stable_helm_repo: true
      credentials_in_arguments: true
      custom_values:
        - "image.tag=${{CF_BRANCH_TAG_NORMALIZED}}"
        - 'ingress.enabled=true'
        - 'ingress.hosts[0].host=demo.prd-demo.cf'
        - 'ingress.hosts[0].paths[0].path=/'
    env:
      name: prod
      endpoints:
      - name: cf-app-prod
        url: http://demo.prd-demo.cf
      type: helm-release
      change: ${{CF_COMMIT_MESSAGE}}
      filters:
      - cluster: prod
        namespace: demo
    when:
      branch:
        only:
          - /((\d+)\.){2}\d+/
